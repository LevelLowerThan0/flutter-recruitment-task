// Mocks generated by Mockito 5.0.15 from annotations
// in filmguru/test/widget_bloc_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i4;

import 'package:filmguru/data/model/movie_item.dart' as _i6;
import 'package:filmguru/feature/movies_list/bloc/movies_list/movies_list_event.dart'
    as _i8;
import 'package:filmguru/feature/movies_list/bloc/movies_list/movies_list_state.dart'
    as _i2;
import 'package:filmguru/repository/movies_repository.dart' as _i3;
import 'package:flutter_bloc/flutter_bloc.dart' as _i7;
import 'package:mockito/mockito.dart' as _i1;

import 'widget_bloc_test.dart' as _i5;

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis

class _FakeMoviesListState_0 extends _i1.Fake implements _i2.MoviesListState {}

class _FakeMoviesRepository_1 extends _i1.Fake implements _i3.MoviesRepository {
}

class _FakeStreamSubscription_2<T> extends _i1.Fake
    implements _i4.StreamSubscription<T> {}

/// A class which mocks [MockMoviesRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockMockMoviesRepository extends _i1.Mock
    implements _i5.MockMoviesRepository {
  MockMockMoviesRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  List<_i6.MovieItem> get movies =>
      (super.noSuchMethod(Invocation.getter(#movies),
          returnValue: <_i6.MovieItem>[]) as List<_i6.MovieItem>);
  @override
  set movies(List<_i6.MovieItem>? _movies) =>
      super.noSuchMethod(Invocation.setter(#movies, _movies),
          returnValueForMissingStub: null);
  @override
  dynamic setMovies(List<_i6.MovieItem>? movies) =>
      super.noSuchMethod(Invocation.method(#setMovies, [movies]));
  @override
  _i4.Future<List<_i6.MovieItem>> getMovies() =>
      (super.noSuchMethod(Invocation.method(#getMovies, []),
              returnValue: Future<List<_i6.MovieItem>>.value(<_i6.MovieItem>[]))
          as _i4.Future<List<_i6.MovieItem>>);
  @override
  String toString() => super.toString();
}

/// A class which mocks [MockMoviesListBloc].
///
/// See the documentation for Mockito's code generation for more information.
class MockMockMoviesListBloc extends _i1.Mock
    implements _i5.MockMoviesListBloc {
  MockMockMoviesListBloc() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.MoviesListState get state =>
      (super.noSuchMethod(Invocation.getter(#state),
          returnValue: _FakeMoviesListState_0()) as _i2.MoviesListState);
  @override
  _i4.Stream<_i2.MoviesListState> get stream =>
      (super.noSuchMethod(Invocation.getter(#stream),
              returnValue: Stream<_i2.MoviesListState>.empty())
          as _i4.Stream<_i2.MoviesListState>);
  @override
  bool get isClosed =>
      (super.noSuchMethod(Invocation.getter(#isClosed), returnValue: false)
          as bool);
  @override
  _i3.MoviesRepository get moviesRepository =>
      (super.noSuchMethod(Invocation.getter(#moviesRepository),
          returnValue: _FakeMoviesRepository_1()) as _i3.MoviesRepository);
  @override
  String toString() => super.toString();
  @override
  _i4.StreamSubscription<_i2.MoviesListState> listen(
          void Function(_i2.MoviesListState)? onData,
          {Function? onError,
          void Function()? onDone,
          bool? cancelOnError}) =>
      (super.noSuchMethod(
              Invocation.method(#listen, [
                onData
              ], {
                #onError: onError,
                #onDone: onDone,
                #cancelOnError: cancelOnError
              }),
              returnValue: _FakeStreamSubscription_2<_i2.MoviesListState>())
          as _i4.StreamSubscription<_i2.MoviesListState>);
  @override
  void emit(_i2.MoviesListState? state) =>
      super.noSuchMethod(Invocation.method(#emit, [state]),
          returnValueForMissingStub: null);
  @override
  void onChange(_i7.Change<_i2.MoviesListState>? change) =>
      super.noSuchMethod(Invocation.method(#onChange, [change]),
          returnValueForMissingStub: null);
  @override
  void addError(Object? error, [StackTrace? stackTrace]) =>
      super.noSuchMethod(Invocation.method(#addError, [error, stackTrace]),
          returnValueForMissingStub: null);
  @override
  void onError(Object? error, StackTrace? stackTrace) =>
      super.noSuchMethod(Invocation.method(#onError, [error, stackTrace]),
          returnValueForMissingStub: null);
  @override
  _i4.Future<void> close() => (super.noSuchMethod(Invocation.method(#close, []),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i4.Future<void>);
  @override
  void add(_i8.MoviesListEvent? event) =>
      super.noSuchMethod(Invocation.method(#add, [event]),
          returnValueForMissingStub: null);
  @override
  void onEvent(_i8.MoviesListEvent? event) =>
      super.noSuchMethod(Invocation.method(#onEvent, [event]),
          returnValueForMissingStub: null);
  @override
  _i4.Stream<
      _i7.Transition<_i8.MoviesListEvent, _i2.MoviesListState>> transformEvents(
          _i4.Stream<_i8.MoviesListEvent>? events,
          _i7.TransitionFunction<_i8.MoviesListEvent, _i2.MoviesListState>?
              transitionFn) =>
      (super.noSuchMethod(
              Invocation.method(#transformEvents, [events, transitionFn]),
              returnValue:
                  Stream<_i7.Transition<_i8.MoviesListEvent, _i2.MoviesListState>>.empty())
          as _i4.Stream<
              _i7.Transition<_i8.MoviesListEvent, _i2.MoviesListState>>);
  @override
  void on<E extends _i8.MoviesListEvent>(
          _i7.EventHandler<E, _i2.MoviesListState>? handler,
          {_i7.EventTransformer<E>? transformer}) =>
      super.noSuchMethod(
          Invocation.method(#on, [handler], {#transformer: transformer}),
          returnValueForMissingStub: null);
  @override
  _i4.Stream<_i2.MoviesListState> mapEventToState(_i8.MoviesListEvent? event) =>
      (super.noSuchMethod(Invocation.method(#mapEventToState, [event]),
              returnValue: Stream<_i2.MoviesListState>.empty())
          as _i4.Stream<_i2.MoviesListState>);
  @override
  void onTransition(
          _i7.Transition<_i8.MoviesListEvent, _i2.MoviesListState>?
              transition) =>
      super.noSuchMethod(Invocation.method(#onTransition, [transition]),
          returnValueForMissingStub: null);
  @override
  _i4.Stream<
      _i7.Transition<_i8.MoviesListEvent, _i2.MoviesListState>> transformTransitions(
          _i4.Stream<_i7.Transition<_i8.MoviesListEvent, _i2.MoviesListState>>?
              transitions) =>
      (super.noSuchMethod(
              Invocation.method(#transformTransitions, [transitions]),
              returnValue:
                  Stream<_i7.Transition<_i8.MoviesListEvent, _i2.MoviesListState>>.empty())
          as _i4.Stream<
              _i7.Transition<_i8.MoviesListEvent, _i2.MoviesListState>>);
  @override
  dynamic wait(int? duration) =>
      super.noSuchMethod(Invocation.method(#wait, [duration]));
}
