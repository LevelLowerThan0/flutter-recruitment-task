// Mocks generated by Mockito 5.0.15 from annotations
// in filmguru/test/state_bloc_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i4;

import 'package:filmguru/data/model/movie_item.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;

import 'state_bloc_test.dart' as _i2;

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis

/// A class which mocks [MockMoviesRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockMockMoviesRepository extends _i1.Mock
    implements _i2.MockMoviesRepository {
  MockMockMoviesRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  List<_i3.MovieItem> get movies =>
      (super.noSuchMethod(Invocation.getter(#movies),
          returnValue: <_i3.MovieItem>[]) as List<_i3.MovieItem>);
  @override
  set movies(List<_i3.MovieItem>? _movies) =>
      super.noSuchMethod(Invocation.setter(#movies, _movies),
          returnValueForMissingStub: null);
  @override
  dynamic setMovies(List<_i3.MovieItem>? movies) =>
      super.noSuchMethod(Invocation.method(#setMovies, [movies]));
  @override
  _i4.Future<List<_i3.MovieItem>> getMovies() =>
      (super.noSuchMethod(Invocation.method(#getMovies, []),
              returnValue: Future<List<_i3.MovieItem>>.value(<_i3.MovieItem>[]))
          as _i4.Future<List<_i3.MovieItem>>);
  @override
  String toString() => super.toString();
}
